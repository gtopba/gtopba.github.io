<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gtopba (Posts about software)</title><link>https://gtopba.github.io/</link><description></description><atom:link href="https://gtopba.github.io/categories/cat_software.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:gtopba@gmail.com"&gt;Warut Phothiphan&lt;/a&gt; </copyright><lastBuildDate>Sun, 03 Jun 2018 19:06:48 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Adding an existing project to GitHub</title><link>https://gtopba.github.io/posts/adding-an-existing-project-to-github/</link><dc:creator>Warut Phothiphan</dc:creator><description>&lt;div&gt;&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a new repository on GitHub. To avoid errors, do not initialize the new repository with README, license, or gitignore files. You can add these files after your project has been pushed to GitHub.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Initialize the local directory as a Git repository.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git init
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add the files in your new local repository. This stages them for the first commit. '.' means all files:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git add .
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Commit the files that you've staged in your local repository.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git commit -m "First commit"
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;add the URL for the remote repository where your local repository will be pushed.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git remote add origin remote repository URL
git remote -v
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Push the changes in your local repository to GitHub.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git push origin master
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/"&gt;Adding an existing project to GitHub using the command line&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>github</category><guid>https://gtopba.github.io/posts/adding-an-existing-project-to-github/</guid><pubDate>Sun, 03 Jun 2018 18:48:57 GMT</pubDate></item><item><title>My github workflow</title><link>https://gtopba.github.io/posts/my-github-workflow/</link><dc:creator>Warut Phothiphan</dc:creator><description>&lt;div&gt;&lt;p&gt;Select branch e.g. master branch. the current branch is called HEAD:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git checkout master
&lt;/pre&gt;
&lt;p&gt;check HEAD:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cat .git/HEAD
&lt;/pre&gt;
&lt;p&gt;modify the code then commit:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git commit -m "leave some note here"
&lt;/pre&gt;
&lt;p&gt;we might want to undo commit:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git reset --hard HEAD~1
&lt;/pre&gt;
&lt;p&gt;or undo to specified commit:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git reset --hard commit_sha
&lt;/pre&gt;
&lt;p&gt;check your local branch with the remote:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git status
&lt;/pre&gt;
&lt;p&gt;push the local commits to remote branch e.g. remote name "origin", branch name "master":&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git push origin master
&lt;/pre&gt;
&lt;p&gt;more common command check:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git help everyday
&lt;/pre&gt;&lt;/div&gt;</description><category>github</category><guid>https://gtopba.github.io/posts/my-github-workflow/</guid><pubDate>Sun, 03 Jun 2018 18:48:13 GMT</pubDate></item><item><title>grep searches for PATTERN.</title><link>https://gtopba.github.io/posts/grep-searches-for-pattern/</link><dc:creator>Warut Phothiphan</dc:creator><description>&lt;div&gt;&lt;p&gt;grep searches for PATTERN in each FILE. A FILE of “-” stands for standard input. If no FILE is given, recursive searches examine the working  directory, and nonrecursive searches read standard input. By default, grep prints the matching lines.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
grep -rnw '/path/to/somewhere/' -e 'pattern'
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;-r or -R  is recursive,&lt;/li&gt;
&lt;li&gt;-n is line number, and&lt;/li&gt;
&lt;li&gt;-w stands for match the whole word.&lt;/li&gt;
&lt;li&gt;-l (lower-case L) can be added to just give the file name of matching files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Along with these, --exclude, --include, --exclude-dir flags could be used for efficient searching.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;This will only search through those files which have .c or .h extensions:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
grep --include=\*.{c,h} -rnw '/path/to/somewhere/' -e "pattern"
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;This will exclude searching all the files ending with .o extension:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
grep --exclude=*.o -rnw '/path/to/somewhere/' -e "pattern"
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;For directories it's possible to exclude a particular directory(ies) through --exclude-dirDocuments parameter. For example, this will exclude the dirs dir1/, dir2/ and all of them matching .dst/:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
grep --exclude-dir={dir1,dir2,*.dst} -rnw '/path/to/somewhere/' -e "pattern"
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more options check man grep.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/16956810/how-do-i-find-all-files-containing-specific-text-on-linux"&gt;rakib_&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>linux</category><guid>https://gtopba.github.io/posts/grep-searches-for-pattern/</guid><pubDate>Fri, 25 May 2018 04:28:01 GMT</pubDate></item><item><title>Github Fork, Sync Fork</title><link>https://gtopba.github.io/posts/github-fork-sync-fork/</link><dc:creator>Warut Phothiphan</dc:creator><description>&lt;div&gt;&lt;div class="section" id="fork"&gt;
&lt;h2&gt;Fork&lt;/h2&gt;
&lt;p&gt;In the top-right corner of the page, click Fork. That's it! Now, you have a fork of the original repository. You can now modified your fork without effecting the original repo. New commits from the main repo won't effect your fork. You need to manually sync your fork with the original repo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sync-fork"&gt;
&lt;h2&gt;Sync Fork&lt;/h2&gt;
&lt;p&gt;Create a local clone of your fork:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git clone https://github.com/YOUR-USERNAME/YOUR-FORK.git
&lt;/pre&gt;
&lt;p&gt;sync your fork with the original repository:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git remote -v
git remote add upstream https://github.com/ORIGINAL-OWNER/ORIGINAL-REPO.git
git remote -v
git fetch upstream
&lt;/pre&gt;
&lt;p&gt;Check out your fork's local branch.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git checkout edge
&lt;/pre&gt;
&lt;p&gt;Merge the changes from upstream/edge into your local edge branch. This brings your fork's edge branch into sync with the upstream repository, without losing your local changes.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git merge upstream/edge
&lt;/pre&gt;
&lt;p&gt;push commits made on your local branch to a remote repository.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git push  &amp;lt;REMOTENAME&amp;gt; &amp;lt;BRANCHNAME&amp;gt;
&lt;/pre&gt;
&lt;p&gt;As an example, you usually run git push origin edge to push your local changes to your online repository.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://help.github.com/articles/fork-a-repo/"&gt;Fork a repo&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://help.github.com/articles/set-up-git/#next-steps-authenticating-with-github-from-git"&gt;Authenticating with GitHub from Git&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://help.github.com/articles/syncing-a-fork/"&gt;Syncing a fork&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://help.github.com/articles/pushing-to-a-remote/"&gt;Pushing to a remote&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>git</category><category>github</category><guid>https://gtopba.github.io/posts/github-fork-sync-fork/</guid><pubDate>Thu, 24 May 2018 08:20:52 GMT</pubDate></item><item><title>Get started with ERPNext</title><link>https://gtopba.github.io/posts/get-started-with-erpnext/</link><dc:creator>Warut Phothiphan</dc:creator><description>&lt;p&gt;Write your post here.&lt;/p&gt;</description><guid>https://gtopba.github.io/posts/get-started-with-erpnext/</guid><pubDate>Sun, 20 May 2018 08:14:11 GMT</pubDate></item><item><title>Compile Smoothieware from source</title><link>https://gtopba.github.io/posts/compile-smoothieware-from-source/</link><dc:creator>Warut Phothiphan</dc:creator><description>&lt;p&gt;Write your post here.&lt;/p&gt;</description><guid>https://gtopba.github.io/posts/compile-smoothieware-from-source/</guid><pubDate>Sun, 20 May 2018 08:11:25 GMT</pubDate></item><item><title>Flatcam installing from source</title><link>https://gtopba.github.io/posts/flatcam-installing-from-source/</link><dc:creator>Warut Phothiphan</dc:creator><description>&lt;dl class="docutils"&gt;
&lt;dt&gt;Create new Python 2.7 environment and install dependencies.&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Follow this tutorial &lt;a class="reference external" href="https://gtopba.github.io/posts/using-python-virtual-environment-with-anaconda"&gt;Using Python virtual environment with Anaconda&lt;/a&gt;. Then open up your new environment terminal. Make sure it is python 2.7 by:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -V
&lt;/pre&gt;
&lt;p&gt;Install packages:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install --upgrade matplotlib pypiwin32 svg.path scipy
&lt;/pre&gt;
&lt;p&gt;note : Numpy already existed in the Anaconda environment. Use this command to check available package:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip freeze
&lt;/pre&gt;
&lt;p&gt;These packages are for Windows user. The .whl file is a pre-compiled package with its dependencies included. Simply download the following Python 2.7 64-bit packages and navigate your terminal to the containing folder.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyqt4"&gt;PyQt4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely"&gt;Shapely&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#rtree"&gt;RTree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#simplejson"&gt;Simplejson&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Run this command to install the packages:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install &amp;lt;package's name&amp;gt;
&lt;/pre&gt;
&lt;p class="last"&gt;From &lt;a class="reference external" href="http://www.flatcam.org/manual/installation.html#required"&gt;original requirements&lt;/a&gt; , it suggests Python 2.7 32-bit. I have not found any problem using Python 2.7 64-bit version.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Clone Flatcam repository and run it&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;navigate your terminal to where you want to put the clone and run this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git clone https://bitbucket.org/jpcgt/flatcam
cd flatcam
python flatcam
&lt;/pre&gt;
&lt;p class="last"&gt;Enjoy the Flatcam ! This is not stable release and may contain bugs, use it at your own risk.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;</description><category>flatcam</category><category>pcb</category><guid>https://gtopba.github.io/posts/flatcam-installing-from-source/</guid><pubDate>Fri, 18 May 2018 11:50:07 GMT</pubDate></item><item><title>Using Python virtual environment with Anaconda</title><link>https://gtopba.github.io/posts/using-python-virtual-environment-with-anaconda/</link><dc:creator>Warut Phothiphan</dc:creator><description>&lt;div&gt;&lt;p&gt;Anaconda is an easier way for beginner to lean Python. We can create Python virtual environments for both 2.7 and 3.6 without messing around with the system PATH. In fact, you don't even need Administrator privilege. Moreover, you can manage Python modules through the GUI package manager. There are other useful tools such as Spyder IDE and Jupyter Notebook which we will talk about in the future. In &lt;a class="reference external" href="https://gtopba.github.io/posts/introduction-to-nikola"&gt;Introduction to Nikola&lt;/a&gt; , I created an environment using virtualenv and virtualenvwrapper-win packages which is fine, but there is a simpler method. Let's get started.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Download and install&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Download latest version of &lt;a class="reference external" href="https://www.anaconda.com/download/"&gt;Anaconda&lt;/a&gt; . I installed the Python 3.6 version. However, you still can create Python 2.7 environment.&lt;/p&gt;
&lt;div class="last figure"&gt;
&lt;img alt="Anaconda Navigator." src="https://gtopba.github.io/pic/nikola-tut/anaconda/nikola-pic.JPG"&gt;
&lt;p class="caption"&gt;Anaconda Navigator.&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt&gt;Create new environment&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;From the left, select Environments tab and create new environment with python 3.6 as show in figure below.&lt;/p&gt;
&lt;div class="last figure"&gt;
&lt;img alt="Creating new environment." src="https://gtopba.github.io/pic/nikola-tut/anaconda/nikola-pic-1.JPG"&gt;
&lt;p class="caption"&gt;Creating new Python 3.6 environment.&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt&gt;Install desired package in the environment&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Start the environment terminal&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Terminal with Python virtual environment" src="https://gtopba.github.io/pic/nikola-tut/anaconda/nikola-pic-2.JPG"&gt;
&lt;p class="caption"&gt;Terminal with Python virtual environment.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Install Nikola package:&lt;/p&gt;
&lt;pre class="last literal-block"&gt;
pip install --upgrade "Nikola[extras]"
&lt;/pre&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;</description><guid>https://gtopba.github.io/posts/using-python-virtual-environment-with-anaconda/</guid><pubDate>Tue, 15 May 2018 04:41:20 GMT</pubDate></item></channel></rss>