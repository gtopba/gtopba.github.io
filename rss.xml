<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gtopba</title><link>https://gtopba.github.io/</link><description>As I'm getting older, my brain's memory is getting poorer. This blog is my second memory back up.</description><atom:link href="https://gtopba.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2018 &lt;a href="mailto:gtopba@gmail.com"&gt;Warut Phothiphan&lt;/a&gt; </copyright><lastBuildDate>Sun, 20 May 2018 20:50:35 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Get started with ERPNext</title><link>https://gtopba.github.io/posts/get-started-with-erpnext/</link><dc:creator>Warut Phothiphan</dc:creator><description>&lt;p&gt;Write your post here.&lt;/p&gt;</description><guid>https://gtopba.github.io/posts/get-started-with-erpnext/</guid><pubDate>Sun, 20 May 2018 08:14:11 GMT</pubDate></item><item><title>Compile Smoothieware from source</title><link>https://gtopba.github.io/posts/compile-smoothieware-from-source/</link><dc:creator>Warut Phothiphan</dc:creator><description>&lt;p&gt;Write your post here.&lt;/p&gt;</description><guid>https://gtopba.github.io/posts/compile-smoothieware-from-source/</guid><pubDate>Sun, 20 May 2018 08:11:25 GMT</pubDate></item><item><title>Double-sided PCB milling</title><link>https://gtopba.github.io/posts/double-sided-pcb-milling/</link><dc:creator>Warut Phothiphan</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#export-gerber-files-from-eagle" id="id1"&gt;Export Gerber files from Eagle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#cam-process-with-flatcam" id="id2"&gt;CAM process with Flatcam&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#configuring-the-project" id="id3"&gt;Configuring the project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#create-mirror-axis-and-alignment-pins" id="id4"&gt;Create mirror axis and alignment pins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#top-side-non-copper-area" id="id5"&gt;Top-side non-copper area&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#top-side-isolation" id="id6"&gt;Top-side isolation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#top-side-solder-mask" id="id7"&gt;Top-side solder mask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#drilling" id="id8"&gt;Drilling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#cutouts" id="id9"&gt;Cutouts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#machine-specific-g-code" id="id10"&gt;Machine specific G-code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#milling-the-pcb" id="id11"&gt;Milling the PCB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="export-gerber-files-from-eagle"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#id1"&gt;Export Gerber files from Eagle&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From your pcb eagle's project, open your board. Then export Gerber files following these 4 steps. Make sure you are working on Metric unit. We need to unselect cutouts as they are included in Excellon file already. Unzip your output file. That's it we are done with  Eagle.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="export gerber." src="https://gtopba.github.io/pic/nikola-tut/pcbmilling/eagle.JPG"&gt;
&lt;p class="caption"&gt;Eagle export Gerber.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="cam-process-with-flatcam"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#id2"&gt;CAM process with Flatcam&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Previous post &lt;a class="reference external" href="https://gtopba.github.io/posts/flatcam-installing-from-source"&gt;Flatcam installing&lt;/a&gt; . Today, I'll show you the process of making 2-layer PCB.&lt;/p&gt;
&lt;div class="section" id="configuring-the-project"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#id3"&gt;Configuring the project&lt;/a&gt;&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Trailing Zeros&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Eagle uses Trailing Zeros in its Excellon number format but does not properly report this format in the Excellon file. To tell FlatCAM to use this format by default set this system option excellon_zeros to T by using the set_sys command in the Shell Command Line Interface as shown below:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set_sys excellon_zero T
&lt;/pre&gt;
&lt;div class="admonition note last"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;2018-05-18 : Current Flatcam source is having problem with this command. If need this functionality, use stable version.&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt&gt;System unit&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;From options tab, select Units as mm.&lt;/p&gt;
&lt;div class="last figure"&gt;
&lt;img alt="Units: mm" src="https://gtopba.github.io/pic/nikola-tut/pcbmilling/flatcam2.JPG"&gt;
&lt;p class="caption"&gt;Units: mm&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="create-mirror-axis-and-alignment-pins"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#id4"&gt;Create mirror axis and alignment pins&lt;/a&gt;&lt;/h3&gt;
&lt;div class="admonition alert alert-info pull-right tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;Each object can be moved to arbitrary location. Select object and go to selected tab then find offset tool.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Load Gerber files:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
copper_top.gbr
copper_bottom.gbr
soldermask_top.gbr
soldermask_bottom.gbr
profile.gbr
&lt;/pre&gt;
&lt;p&gt;Load Excellon file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
drills.xln
&lt;/pre&gt;
&lt;p&gt;Mirror axis for bottom layer stuff, from menu bar, Tool -&amp;gt; Double-sided PCB Tool. Create mirror axis around Y axis at location x = 50 mm:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Mirror Axis: Y
Axis Location: Point
Point/Box: (50,0)
&lt;/pre&gt;
&lt;p&gt;Mirror bottom layer objects one by one from the drop-down menu and click "Mirror Object":&lt;/p&gt;
&lt;pre class="literal-block"&gt;
copper_bottom.gbr
soldermask_bottom.gbr
profile.gbr
drills.xln
&lt;/pre&gt;
&lt;p&gt;Alignment Holes help align the pcb when we flip it over. Create holes with 6 mm in diameter at desired locations. Then click "Create Alignment Drill":&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Alignment Holes: (110, -5),(110, 60)
Drill diam: 6
&lt;/pre&gt;
&lt;p&gt;You can generate gcode to cut Alignment Holes following similar process of the next section below. You can skip this for now and do it later.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="flatcam" src="https://gtopba.github.io/pic/nikola-tut/pcbmilling/flatcam1.JPG"&gt;
&lt;p class="caption"&gt;Double-sided PCB Tool&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="top-side-non-copper-area"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#id5"&gt;Top-side non-copper area&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hide all other layer except copper_top.gbr. Select this object then navigate to "Non-copper regions" section and generate geometry:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Boundary Margin: 0.1
&lt;/pre&gt;
&lt;p&gt;New geometry "copper_top.gbr_noncopper" is created. Navigate to "Paint Area" and generate paint area:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Tool dia:  0.1
Overlap:   0.05
Margin:    0.1
Method:    standard
Connect:   yes
Contour:   yes
Selection: All
&lt;/pre&gt;
&lt;p&gt;New geometry "copper_top.gbr_noncopper_paint" is created. Navigate to "Create CNC Job" and generate toolpath:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Cut Z:        -0.05
Travel Z:      1.0
Feed Rate:     250.0
Tool dia:      0.1
Spindle speed: 24,000
Multi-Depth:   No
&lt;/pre&gt;
&lt;p&gt;New geometry "copper_top.gbr_noncopper_paint_cnc" is created. Navigate to "Export G-Code" and export gcode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="top-side-isolation"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#id6"&gt;Top-side isolation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Select "copper_top.gbr" and navigate to "Isolation Routing". Then generate geometry:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Tool dia:       0.145
Width(#passes): 1
Pass overlap:   0.0
Combine Passes: No
&lt;/pre&gt;
&lt;p&gt;New geometry "copper_top.gbr_iso" is created. Navigate to "Create CNC Job" and generate toolpath:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Cut Z:        -0.05
Travel Z:      1.0
Feed Rate:     250.0
Tool dia:      0.145
Spindle speed: 24,000
Multi-Depth:   No
&lt;/pre&gt;
&lt;p&gt;New geometry "copper_top.gbr_iso_cnc" is created. Navigate to "Export G-Code" and export gcode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="top-side-solder-mask"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#id7"&gt;Top-side solder mask&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Select "soldermask_top.gbr" and navigate to "Isolation Routing". Then generate geometry:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Tool dia:       0.0
Width(#passes): 1
Pass overlap:   0.0
Combine Passes: No
&lt;/pre&gt;
&lt;p&gt;New geometry "soldermask_top.gbr_iso" is created. Navigate to "Paint Area" and generate paint area:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Tool dia:  0.1
Overlap:   0.05
Margin:    0.1
Method:    standard
Connect:   yes
Contour:   yes
Selection: All
&lt;/pre&gt;
&lt;p&gt;New geometry "soldermask_top.gbr_iso_paint" is created. Navigate to "Create CNC Job" and generate toolpath:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Cut Z:        -0.05
Travel Z:      1.0
Feed Rate:     400.0
Tool dia:      0.1
Spindle speed: 24,000
Multi-Depth:   No
&lt;/pre&gt;
&lt;p&gt;New geometry "soldermask_top.gbr_iso_paint_cnc" is created. Navigate to "Export G-Code" and export gcode. That's it for the top layer. Now flip over the PCB. The alignment holes helps keep PCB in correct position. The bottom-side non-copper area, isolation, soldermask are identical to the top layer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="drilling"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#id8"&gt;Drilling&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In drills.xln's Tools selection, choose hole sizes needed for drilling, excluding those large holes which need milling. Holes larger than 1 mm in diameter, I will use milling process instead. So select:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
0.406
0.61
0.95
1.016
&lt;/pre&gt;
&lt;p&gt;In Create CNC Job section:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Cut Z:        -1.95
Travel Z:      1.0
Feed Rate:     150.0
Tool change:   yes
Tool change Z: 50
Spindle speed: 24,000
&lt;/pre&gt;
&lt;p&gt;New geometry "drills.xln_cnc" is created. Navigate to "Export G-Code" and export gcode. Next, select drills.xln again and choose hole sizes for milling:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
2.2
3.2
3.302
&lt;/pre&gt;
&lt;p&gt;At Mill Holes section, generate geometry:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Tool dia: 1.5
&lt;/pre&gt;
&lt;p&gt;New geometry "soldermask_top.gbr_iso_paint" is created. Navigate to "Create CNC Job" and generate toolpath:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Cut Z:        -1.95
Travel Z:      1.0
Feed Rate:     150.0
Tool dia:      1.5
Spindle speed: 24,000
Multi-Depth:   yes
Depth/pass:    1
&lt;/pre&gt;
&lt;p&gt;New geometry "drills.xln_mill_cnc" is created. Navigate to "Export G-Code" and export gcode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cutouts"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#id9"&gt;Cutouts&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is a bit tricky. We need the cut edges pass right through the middle of profile lines. The measurement tool indicates 0.254 mm line thickness. For 1.5 mm tool dia, we set Tool dia = 1.5 - 0.254 mm. In Isolation Routinf, generate geometry with the calculated Tool dia:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Tool dia:       1.246
Width(passes):  1
Pass overlap:   0.0
Combine Passes: No
&lt;/pre&gt;
&lt;p&gt;New geometry "profile.gbr_iso" is created. Delete the interior part by Edit Geometry &amp;gt; Add Rectangle on inner line &amp;gt; With Select tool, press CTRL and select Geometry and box respectively &amp;gt; Cut Path &amp;gt; Delete Shape both box and inner line &amp;gt; Update Geometry.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="/pic/nikola-tut/pcbmilling/flatcam3.JPG" src="https://gtopba.github.io/pic/nikola-tut/pcbmilling/flatcam3.JPG"&gt;
&lt;p class="caption"&gt;Add Rectangle &amp;gt; Cut Path &amp;gt; Delete Shape&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="/pic/nikola-tut/pcbmilling/flatcam4.JPG" src="https://gtopba.github.io/pic/nikola-tut/pcbmilling/flatcam4.JPG"&gt;
&lt;p class="caption"&gt;Only outter profile left.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;For small size PCB, you might need tabs to hold PCB in place while cutting. To do so, edit geometry &amp;gt; draw boxes on where you want tabs&amp;gt; cut path &amp;gt; delete boxes. This PCB is big enough so I will move on to Create CNC Job. Note that Tool dia is 1.5 mm this time:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Cut Z:        -1.95
Travel Z:      1.0
Feed Rate:     150.0
Tool dia:      1.5
Spindle speed: 24,000
Multi-Depth:   yes
Depth/pass:    1
&lt;/pre&gt;
&lt;div class="figure"&gt;
&lt;img alt="/pic/nikola-tut/pcbmilling/flatcam5.JPG" src="https://gtopba.github.io/pic/nikola-tut/pcbmilling/flatcam5.JPG"&gt;
&lt;p class="caption"&gt;A closer look.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="/pic/nikola-tut/pcbmilling/flatcam6.JPG" src="https://gtopba.github.io/pic/nikola-tut/pcbmilling/flatcam6.JPG"&gt;
&lt;p class="caption"&gt;Cutting edges are on the middle of the profile.gbr's lines now.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;New geometry "profile.gbr_iso_cnc" is created. Export G-Code. Now we are done with Flatcam.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="machine-specific-g-code"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#id10"&gt;Machine specific G-code&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now we combine exported Gcode into a single file if they share the same cutting tool. A 0.1mm engrave bit is used for noncopper paint and isolation. A 0.6 and 0.9 mm drill bits are used for drilling. A 1.5 mm endmill is used for large holes and profile milling. This is example of my Gcode header:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
G17
G54
G21
G90
$H
G00 X7.999700Y75.7321
M03 S24000
G4 P1
G00 Z1.0000
G01 Z-0.0500 F200.00
G01 X8.045600Y75.7418
.....
&lt;/pre&gt;
&lt;p&gt;My CNC has Surface grid-probing feature which helps compensate uneven surface automatically. Simply specify area you wanna probe with G32. M374 save probe results for next time usage.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
G32 X-143.790000 Y-77.1287 A105. B55.
M374
G4 P1
G17
G54
G21
G90
$H
G00 X7.999700Y75.7321
M03 S24000
G4 P1
G00 Z1.0000
G01 Z-0.0500 F200.00
G01 X8.045600Y75.7418
...
&lt;/pre&gt;
&lt;p&gt;Also Tool length probe with G38.2 and G10 for work coordinate. M500 save the settings for next time usage.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
G32 X-143.790000 Y-77.1287 A105. B55.
M374
G4 P1
G17
G54
G21
G90
G00 X4.000000Y74.000F2000.
G4 P1
G38.2 Z-20.
G4 P2
G10 L20 P1 Z0.
M500
G4 P1
$H
G00 X7.999700Y75.7321
M03 S24000
G4 P1
G00 Z1.0000
G01 Z-0.0500 F200.00
G01 X8.045600Y75.7418
&lt;/pre&gt;
&lt;div class="admonition important"&gt;
&lt;p class="first admonition-title"&gt;Important&lt;/p&gt;
&lt;p class="last"&gt;G32 utilize Machine coordinate system (G53 values)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="/pic/nikola-tut/pcbmilling/flatcam7.JPG" src="https://gtopba.github.io/pic/nikola-tut/pcbmilling/flatcam7.JPG"&gt;
&lt;p class="caption"&gt;Gcode visualization of top layer isolation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="/pic/nikola-tut/pcbmilling/flatcam8.JPG" src="https://gtopba.github.io/pic/nikola-tut/pcbmilling/flatcam8.JPG"&gt;
&lt;p class="caption"&gt;Gcode visualization of top layer soldermask.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="/pic/nikola-tut/pcbmilling/flatcam9.JPG" src="https://gtopba.github.io/pic/nikola-tut/pcbmilling/flatcam9.JPG"&gt;
&lt;p class="caption"&gt;Gcode visualization of bottom layer isolation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="/pic/nikola-tut/pcbmilling/flatcam10.JPG" src="https://gtopba.github.io/pic/nikola-tut/pcbmilling/flatcam10.JPG"&gt;
&lt;p class="caption"&gt;Gcode visualization of bottom layer soldermask.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="/pic/nikola-tut/pcbmilling/flatcam11.JPG" src="https://gtopba.github.io/pic/nikola-tut/pcbmilling/flatcam11.JPG"&gt;
&lt;p class="caption"&gt;Gcode visualization of holes and profile milling.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="milling-the-pcb"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://gtopba.github.io/posts/double-sided-pcb-milling/#id11"&gt;Milling the PCB&lt;/a&gt;&lt;/h2&gt;
&lt;div class="figure"&gt;
&lt;img alt="/pic/nikola-tut/pcbmilling/flatcam12.JPG" src="https://gtopba.github.io/pic/nikola-tut/pcbmilling/flatcam12.JPG"&gt;
&lt;p class="caption"&gt;Milling top layer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="/pic/nikola-tut/pcbmilling/flatcam13.JPG" src="https://gtopba.github.io/pic/nikola-tut/pcbmilling/flatcam13.JPG"&gt;
&lt;p class="caption"&gt;Milling top layer soldermask.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="/pic/nikola-tut/pcbmilling/flatcam14.JPG" src="https://gtopba.github.io/pic/nikola-tut/pcbmilling/flatcam14.JPG"&gt;
&lt;p class="caption"&gt;Milling bottom layer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="/pic/nikola-tut/pcbmilling/flatcam15.JPG" src="https://gtopba.github.io/pic/nikola-tut/pcbmilling/flatcam15.JPG"&gt;
&lt;p class="caption"&gt;Finshed PCB top side.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="/pic/nikola-tut/pcbmilling/flatcam16.JPG" src="https://gtopba.github.io/pic/nikola-tut/pcbmilling/flatcam16.JPG"&gt;
&lt;p class="caption"&gt;Finshed PCB bottom side.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>flatcam</category><category>pcb</category><guid>https://gtopba.github.io/posts/double-sided-pcb-milling/</guid><pubDate>Fri, 18 May 2018 11:51:30 GMT</pubDate></item><item><title>Flatcam installing from source</title><link>https://gtopba.github.io/posts/flatcam-installing-from-source/</link><dc:creator>Warut Phothiphan</dc:creator><description>&lt;dl class="docutils"&gt;
&lt;dt&gt;Create new Python 2.7 environment and install dependencies.&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Follow this tutorial &lt;a class="reference external" href="https://gtopba.github.io/posts/using-python-virtual-environment-with-anaconda"&gt;Using Python virtual environment with Anaconda&lt;/a&gt;. Then open up your new environment terminal. Make sure it is python 2.7 by:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -V
&lt;/pre&gt;
&lt;p&gt;Install packages:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install matplotlib
pip install pypiwin32
pip install pywin32
pip install svg.path
pip install scipy
&lt;/pre&gt;
&lt;p&gt;note : Numpy already existed in the Anaconda environment. Use this command to check available package:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip freeze
&lt;/pre&gt;
&lt;p&gt;These packages are for Windows user. The .whl file is a pre-compiled package with its dependencies included. Simply download the following Python 2.7 64-bit packages and navigate your terminal to the containing folder.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.riverbankcomputing.co.uk/software/pyqt/"&gt;PyQt4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Toblerity/Shapely"&gt;Shapely&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Toblerity/rtree"&gt;RTree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/simplejson/simplejson"&gt;Simplejson&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Run this command to install the packages:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install &amp;lt;package's name&amp;gt;
&lt;/pre&gt;
&lt;p class="last"&gt;From &lt;a class="reference external" href="http://www.flatcam.org/manual/installation.html#required"&gt;original requirements&lt;/a&gt; , it suggests Python 2.7 32-bit. I have not found any problem using Python 2.7 64-bit version.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Clone Flatcam repository and run it&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;navigate your terminal to where you want to put the clone and run this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git clone https://bitbucket.org/jpcgt/flatcam
cd flatcam
python flatcam
&lt;/pre&gt;
&lt;p class="last"&gt;Enjoy the Flatcam ! This is not stable release and may contain bugs, use it at your own risk.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;</description><category>flatcam</category><category>pcb</category><guid>https://gtopba.github.io/posts/flatcam-installing-from-source/</guid><pubDate>Fri, 18 May 2018 11:50:07 GMT</pubDate></item><item><title>Using Python virtual environment with Anaconda</title><link>https://gtopba.github.io/posts/using-python-virtual-environment-with-anaconda/</link><dc:creator>Warut Phothiphan</dc:creator><description>&lt;div&gt;&lt;p&gt;Anaconda is an easier way for beginner to lean Python. We can create Python virtual environments for both 2.7 and 3.6 without messing around with the system PATH. In fact, you don't even need Administrator privilege. Moreover, you can manage Python modules through the GUI package manager. There are other useful tools such as Spyder IDE and Jupyter Notebook which we will talk about in the future. In &lt;a class="reference external" href="https://gtopba.github.io/posts/introduction-to-nikola"&gt;Introduction to Nikola&lt;/a&gt; , I created an environment using virtualenv and virtualenvwrapper-win packages which is fine, but there is a simpler method. Let's get started.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Download and install&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Download latest version of &lt;a class="reference external" href="https://www.anaconda.com/download/"&gt;Anaconda&lt;/a&gt; . I installed the Python 3.6 version. However, you still can create Python 2.7 environment.&lt;/p&gt;
&lt;div class="last figure"&gt;
&lt;img alt="Anaconda Navigator." src="https://gtopba.github.io/pic/nikola-tut/anaconda/nikola-pic.JPG"&gt;
&lt;p class="caption"&gt;Anaconda Navigator.&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt&gt;Create new environment&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;From the left, select Environments tab and create new environment with python 3.6 as show in figure below.&lt;/p&gt;
&lt;div class="last figure"&gt;
&lt;img alt="Creating new environment." src="https://gtopba.github.io/pic/nikola-tut/anaconda/nikola-pic-1.JPG"&gt;
&lt;p class="caption"&gt;Creating new Python 3.6 environment.&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt&gt;Install desired package in the environment&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Start the environment terminal&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Terminal with Python virtual environment" src="https://gtopba.github.io/pic/nikola-tut/anaconda/nikola-pic-2.JPG"&gt;
&lt;p class="caption"&gt;Terminal with Python virtual environment.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Install Nikola package:&lt;/p&gt;
&lt;pre class="last literal-block"&gt;
pip install --upgrade "Nikola[extras]"
&lt;/pre&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;</description><guid>https://gtopba.github.io/posts/using-python-virtual-environment-with-anaconda/</guid><pubDate>Tue, 15 May 2018 04:41:20 GMT</pubDate></item><item><title>Deploying the static website to GitHub.</title><link>https://gtopba.github.io/posts/deploying-the-static-website-to-github/</link><dc:creator>Warut Phothiphan</dc:creator><description>&lt;div&gt;&lt;p&gt;Assuming you already created a github.io repository following the instruction from this link &lt;a class="reference external" href="https://pages.github.com/"&gt;https://pages.github.com/&lt;/a&gt; and already install the 'Git&amp;lt;&lt;a class="reference external" href="https://git-scm.com/downloads"&gt;https://git-scm.com/downloads&lt;/a&gt;&amp;gt;'_ software according to your operating system. Given the original 'github_deploy&amp;lt;&lt;a class="reference external" href="https://getnikola.com/handbook.html#deploying-to-github"&gt;https://getnikola.com/handbook.html#deploying-to-github&lt;/a&gt;&amp;gt;'_ tutorial, I will explain more where you might get confused.&lt;/p&gt;
&lt;p&gt;Initialize a git repository in your Nikola source directory by running:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git init.
git remote add origin git@github.com:user/repository.git
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;user : your Github username, for example, "deadbeef"&lt;/li&gt;
&lt;li&gt;repository : your github.io repository, for example, deadbeef.github.io.git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;so the command should be:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git remote add origin git@github.com:deadbeef/deadbeef.github.io.git
&lt;/pre&gt;
&lt;p&gt;Then, setup conf.py:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
GITHUB_SOURCE_BRANCH = 'src'
GITHUB_DEPLOY_BRANCH = 'master'
GITHUB_REMOTE_NAME = 'origin'
GITHUB_COMMIT_SOURCE = True
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;'src' means your Nikola source branch's name is src&lt;/li&gt;
&lt;li&gt;'master' means your compiled static website branch's name is master&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Create a .gitignore file containing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cache
.doit.db
__pycache__
output
&lt;/pre&gt;
&lt;p&gt;Finally, deploying:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nikola github_deploy
&lt;/pre&gt;
&lt;p&gt;first time it will ask you to log in to your github account. Then, you should be able to access you website &lt;a class="reference external" href="https://deadbeef.github.io"&gt;https://deadbeef.github.io&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>git</category><category>github</category><category>nikola</category><guid>https://gtopba.github.io/posts/deploying-the-static-website-to-github/</guid><pubDate>Thu, 06 Jul 2017 15:24:34 GMT</pubDate></item><item><title>Customizing the website.</title><link>https://gtopba.github.io/posts/customizing-the-website/</link><dc:creator>Warut Phothiphan</dc:creator><description>&lt;dl class="docutils"&gt;
&lt;dt&gt;Create your homepage&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;By default your homepage is the main blog page showing all your posts. If you prefer the default homepage, simply skip this step. Use your favorite editor to create index.html file in the "pages" folder. This will be your main page. Now edit it as you want. You can see source code of my main page by clicking "Source" at the top-right corner of my website. Alternatively, go check all my source project in my Github src branch of this repository. You just need to do the body part as the header and footer will be added by the compiler according to the template.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="My homepage." src="https://gtopba.github.io/pic/nikola-tut/customise-homepage/body.JPG"&gt;
&lt;p class="caption"&gt;Body part in the red box.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;in conf.py edit the following parameters to tell compiler to put the main blog page to sub-folder blog:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
INDEX_PATH = "blog"
&lt;/pre&gt;
&lt;p&gt;and to build the html page at main directory. The page.tmpl is the template that we will edit later:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PAGES = (
        ("pages/*.rst", "pages", "page.tmpl"),
        ("pages/*.md", "pages", "page.tmpl"),
        ("pages/*.txt", "pages", "page.tmpl"),
        ("pages/*.html", "", "page.tmpl"),
)
&lt;/pre&gt;
&lt;p class="last"&gt;Now you should have similar page like mine without those graphical icons which require 3rd party library. As I am using Cerulean theme, yours might look different. We will change the theme soon.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Add more tabs and drop-down menu on navigation bar&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;For example:&lt;/p&gt;
&lt;pre class="last literal-block"&gt;
NAVIGATION_LINKS = {
        DEFAULT_LANG: (
                ((      ("/blog/","Timeline"),("/pages/lst-ex/","List of examples")     ), "Blog"),
                ("/archive.html", "Archive"),
                ("/categories/", "Tags"),
                ("/rss.xml", "RSS feed"),
                ("/pages/about-me/", "About"),
        ),
}
&lt;/pre&gt;
&lt;/dd&gt;
&lt;dt&gt;Change theme and edit template&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Choose your favorite theme from &lt;a class="reference external" href="https://bootswatch.com/"&gt;https://bootswatch.com/&lt;/a&gt; then run this command with your favorite theme's name, for example, "cerulean":&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nikola bootswatch_theme -s cerulean
&lt;/pre&gt;
&lt;p&gt;Now your new theme is installed. You can modify your theme by tweaking in to the css file inside your new theme folder. In this case&lt;/p&gt;
&lt;pre class="literal-block"&gt;
theme/custom/asset
&lt;/pre&gt;
&lt;p&gt;But we will get into that later. Now let's edit the templates by copying them from the base theme, in this case, bootstrap3:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nikola theme -c base.tmpl
nikola theme -c base_helper.tmpl
&lt;/pre&gt;
&lt;p&gt;This makes a copy of templates which overrides the parent template Bootstrap3. Firstly, have a look at base.tmpl, by default nikola inverse the navbar color. You can change navbar color to default.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;nav class="navbar navbar-default navbar-static-top"&amp;gt;
&lt;/pre&gt;
&lt;p&gt;In base_helper.tmpl we add a graphic library font-awesome. Go to &lt;a class="reference external" href="https://fontawesome.com/get-started"&gt;https://fontawesome.com/get-started&lt;/a&gt; and copy code similar to below and put it to roughly line 112 where you see other ccs libraries added:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;link href="/fontawesome/fontawesome-all.css" rel="stylesheet"&amp;gt;
&lt;/pre&gt;
&lt;p class="last"&gt;Now you can use icons on your pages&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;</description><category>bootstrap</category><category>css</category><category>nikola</category><guid>https://gtopba.github.io/posts/customizing-the-website/</guid><pubDate>Thu, 06 Jul 2017 15:23:41 GMT</pubDate></item><item><title>An empty website and its folder structure.</title><link>https://gtopba.github.io/posts/generating-an-empty-website/</link><dc:creator>Warut Phothiphan</dc:creator><description>&lt;div&gt;&lt;div class="sidebar"&gt;
&lt;p class="first sidebar-title"&gt;Tip: Demo site&lt;/p&gt;
&lt;p&gt;You can generate a website containing demo contents in it by using --demo option:&lt;/p&gt;
&lt;pre class="last literal-block"&gt;
nikola init --demo my_first_site
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now let's generate an empty site with any name such as "my_first_site". Navigate your terminal to the directory that you want to put your project folder on. Then run this command and follow its instructions:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nikola init my_first_site
&lt;/pre&gt;
&lt;p&gt;Then create your first post and it will ask you to input post title. Your post file .rst will be created in "posts" folder. We will edit the post later:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nikola new_post
&lt;/pre&gt;
&lt;p&gt;Build your website:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nikola build
&lt;/pre&gt;
&lt;p&gt;Let's see your empty website on the browser. The -b option will open your default web browser automatically:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nikola serve -b
&lt;/pre&gt;
&lt;p&gt;Press Ctrl+C to stop your web server.&lt;/p&gt;
&lt;div class="section" id="the-project-s-folder-structure"&gt;
&lt;h2&gt;The project's folder structure.&lt;/h2&gt;
&lt;p&gt;After the initialization, you will get folder like this.&lt;/p&gt;
&lt;img alt="Folder Structure" class="align-left" src="https://gtopba.github.io/pic/nikola-tut/folder_struc.JPG" style="width: 267.0px; height: 235.0px;"&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="13%"&gt;
&lt;col width="87%"&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;files&lt;/td&gt;
&lt;td&gt;Everything in here will be copied to your output folder.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;galleries&lt;/td&gt;
&lt;td&gt;Put your images folder here to generate gallery page.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;listings&lt;/td&gt;
&lt;td&gt;Put your code here to show it. (&lt;a class="reference external" href="https://gtopba.github.io/pages/listings-demo"&gt;Learn more&lt;/a&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;output&lt;/td&gt;
&lt;td&gt;Your generated website.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pages&lt;/td&gt;
&lt;td&gt;All your pages are kept here.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;post&lt;/td&gt;
&lt;td&gt;All your posts are kept here.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;conf.py&lt;/td&gt;
&lt;td&gt;settings for Nikola.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next post, we will customize our site.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>nikola</category><guid>https://gtopba.github.io/posts/generating-an-empty-website/</guid><pubDate>Thu, 06 Jul 2017 15:16:58 GMT</pubDate></item><item><title>Introduction to Nikola.</title><link>https://gtopba.github.io/posts/introduction-to-nikola/</link><dc:creator>Warut Phothiphan</dc:creator><description>&lt;div&gt;&lt;p&gt;Nikola is a static site and blog generator written in Python. Nikola-based sites don't run any code on the server, there is no way to process user input in forms. You can have animations, slides or whatever fancy CSS3/HTML5 thingie you like. It only means all that HTML is generated already before being uploaded.&lt;/p&gt;
&lt;p&gt;On the other hand, most "modern" websites are dynamic in the sense that the contents of the site live in a database, and are converted into HTML only when a user wants to see the page. However, on dynamic sites, every time a reader wants a page, a whole lot of database queries are made. Then a whole pile of code chews that data, and HTML is produced, which is sent to the user. All that requires CPU and memory.&lt;/p&gt;
&lt;p&gt;On a static site, the highly optimized HTTP server reads the file from disk (or, if it's a popular file, from disk cache), and sends it to the user. You could probably serve a bazillion (technical term) page views from a phone using static sites.&lt;/p&gt;
&lt;p&gt;Using Nikola on Windows can be a little trickier. Most tutorial out there are mostly based on Linux and MacOS. As a Windows user, I sometime failed to follow those tutorials. However, you will just have to get through it once then you will be fine. Let's get started.&lt;/p&gt;
&lt;div class="section" id="preparing-a-development-environment"&gt;
&lt;h2&gt;Preparing a development environment&lt;/h2&gt;
&lt;p&gt;Nikola runs on Python. So we need to install Python and necessary modules. All the modules will be installed inside an isolated Python virtual environment with it own libraries and site-packages. Virtual environment allows you to work on more than one project separately.&lt;/p&gt;
&lt;p&gt;Note that I am using windows. Some command-line syntax may differ from other operating systems. There are several ways to install modules on Python. If you are interested in this topic, I would recommend you to check this out &lt;a class="reference external" href="https://www.youtube.com/user/sentdex"&gt;https://www.youtube.com/user/sentdex&lt;/a&gt;&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Download and install the latest version of Python at &lt;a class="reference external" href="https://www.python.org/downloads/release/python-361/"&gt;https://www.python.org/downloads/release/python-361/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install virtualenv module by running this command in you terminal. In this case, the Windows command line (Start&amp;gt;cmd):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
py -m pip install virtualenv
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install virtualenvwrapper-win. Using the virtualenv through this wrapper is much easier:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
py -m pip install virtualenvwrapper-win
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a virtual environment with any name such as "nikola":&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mkvirtualenv nikola
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install Nikola package:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install --upgrade "Nikola[extras]"
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you are ready to generate the first website. The next post will teach you how to genrate a static website. I would reccomend you to check out your new environment folder at C:/Users/[username]/Envs. Also learn more about the virtualenvwrapper command on their mainpage.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;UPDATE 2018-05-15 : I have found a simpler way to create virtual environment and manage packages &lt;a class="reference external" href="https://gtopba.github.io/posts/using-python-virtual-environment-with-anaconda"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>nikola</category><guid>https://gtopba.github.io/posts/introduction-to-nikola/</guid><pubDate>Thu, 06 Jul 2017 15:13:28 GMT</pubDate></item></channel></rss>